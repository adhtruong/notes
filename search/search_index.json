{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Notes","title":"Technical Notes"},{"location":"#technical-notes","text":"","title":"Technical Notes"},{"location":"generative_art/","text":"Generative Art Genuary 2022 Repo .","title":"Generative Art"},{"location":"generative_art/#generative-art","text":"","title":"Generative Art"},{"location":"generative_art/#genuary-2022","text":"Repo .","title":"Genuary 2022"},{"location":"tools/","text":"Git git add . git commit -m 'message' git commit --amend --no-edit git rebase <branch> Undo commit git reset HEAD~ Undo commit but leave changed files staged git reset --soft HEAD~ Pre-commits Source . # Run against all files pre-commit run -a Mkdocs Mkdocs builds docs from Markdown Useful Plugins Cookiecutter For template projects.","title":"Tools"},{"location":"tools/#git","text":"git add . git commit -m 'message' git commit --amend --no-edit git rebase <branch> Undo commit git reset HEAD~ Undo commit but leave changed files staged git reset --soft HEAD~","title":"Git"},{"location":"tools/#pre-commits","text":"Source . # Run against all files pre-commit run -a","title":"Pre-commits"},{"location":"tools/#mkdocs","text":"Mkdocs builds docs from Markdown","title":"Mkdocs"},{"location":"tools/#useful-plugins","text":"","title":"Useful Plugins"},{"location":"tools/#cookiecutter","text":"For template projects.","title":"Cookiecutter"},{"location":"python/descriptors/","text":"Descriptors Sources https://realpython.com/python-descriptors/ SQLAlchemy SQLAlchemy extensively uses descriptors to give a convient way to construct queries by allowing filtering based on class attributes. Typing import typing _T = typing . TypeVar ( \"_T\" ) class Mapped ( typing . Generic [ _T ]): \"\"\"Returns type for class attribute and actual value for instance.\"\"\" if typing . TYPE_CHECKING : @typing . overload def __get__ ( self , instance : None , owner : Any ) -> type [ _T ]: ... @typing . overload def __get__ ( self , instance : object , owner : Any ) -> _T : ... def __get__ ( self , instance : object , owner : Any ) -> Union [ type [ _T ], _T ]: ...","title":"Descriptors"},{"location":"python/descriptors/#descriptors","text":"Sources https://realpython.com/python-descriptors/","title":"Descriptors"},{"location":"python/descriptors/#sqlalchemy","text":"SQLAlchemy extensively uses descriptors to give a convient way to construct queries by allowing filtering based on class attributes.","title":"SQLAlchemy"},{"location":"python/descriptors/#typing","text":"import typing _T = typing . TypeVar ( \"_T\" ) class Mapped ( typing . Generic [ _T ]): \"\"\"Returns type for class attribute and actual value for instance.\"\"\" if typing . TYPE_CHECKING : @typing . overload def __get__ ( self , instance : None , owner : Any ) -> type [ _T ]: ... @typing . overload def __get__ ( self , instance : object , owner : Any ) -> _T : ... def __get__ ( self , instance : object , owner : Any ) -> Union [ type [ _T ], _T ]: ...","title":"Typing"},{"location":"python/notable_resources/","text":"Notable Resources Cosmic Python Real Python","title":"Notable Resources"},{"location":"python/notable_resources/#notable-resources","text":"Cosmic Python Real Python","title":"Notable Resources"},{"location":"python/python/","text":"","title":"Python"},{"location":"python/virtual_envs/","text":"Environment management Virtual Env module Bundled with python 3.3+ For unix, python -m venv venv source venv/bin/activate or Windows, python -m venv venv source venv/Script/activate Pipenv pip install pipenv pipenv --python 3.9 shell Default behaviour is to store virtual env remnants in global repo rather than local. Poetry","title":"Environment management"},{"location":"python/virtual_envs/#environment-management","text":"","title":"Environment management"},{"location":"python/virtual_envs/#virtual-env-module","text":"Bundled with python 3.3+ For unix, python -m venv venv source venv/bin/activate or Windows, python -m venv venv source venv/Script/activate","title":"Virtual Env module"},{"location":"python/virtual_envs/#pipenv","text":"pip install pipenv pipenv --python 3.9 shell Default behaviour is to store virtual env remnants in global repo rather than local.","title":"Pipenv"},{"location":"python/virtual_envs/#poetry","text":"","title":"Poetry"},{"location":"python/libraries/pydantic/","text":"","title":"Pydantic"},{"location":"python/libraries/sqlachemy/","text":"SQLAlchemy Docs Usage from typing import Optional from sqlalchemy import select from sqlalchemy.orm import declarative_base , Session , DeclarativeMeta from sqlalchemy import Column , Integer , String , create_engine Base : DeclarativeMeta = declarative_base () class Author ( Base ): __tablename__ = \"authors\" id : int = Column ( Integer , primary_key = True ) name : str = Column ( String , nullable = False ) age : Optional [ int ] = Column ( Integer , nullable = True ) def __str__ ( self ) -> str : return f \"Author(id= { self . id } , name= { self . name } , age= { self . age } )\" def main () -> None : engine = create_engine ( \"sqlite:///:memory:\" , future = True , echo = True ) Base . metadata . create_all ( bind = engine ) with Session ( bind = engine ) as session : session . add ( Author ( id = 1 , name = \"John\" , age = None )) session . add ( Author ( id = 2 , name = \"Paul\" , age = 22 )) select_statement = select ( Author ) for author in session . execute ( select_statement ) . scalars (): print ( author ) if __name__ == \"__main__\" : main ()","title":"SQLAlchemy"},{"location":"python/libraries/sqlachemy/#sqlalchemy","text":"Docs","title":"SQLAlchemy"},{"location":"python/libraries/sqlachemy/#usage","text":"from typing import Optional from sqlalchemy import select from sqlalchemy.orm import declarative_base , Session , DeclarativeMeta from sqlalchemy import Column , Integer , String , create_engine Base : DeclarativeMeta = declarative_base () class Author ( Base ): __tablename__ = \"authors\" id : int = Column ( Integer , primary_key = True ) name : str = Column ( String , nullable = False ) age : Optional [ int ] = Column ( Integer , nullable = True ) def __str__ ( self ) -> str : return f \"Author(id= { self . id } , name= { self . name } , age= { self . age } )\" def main () -> None : engine = create_engine ( \"sqlite:///:memory:\" , future = True , echo = True ) Base . metadata . create_all ( bind = engine ) with Session ( bind = engine ) as session : session . add ( Author ( id = 1 , name = \"John\" , age = None )) session . add ( Author ( id = 2 , name = \"Paul\" , age = 22 )) select_statement = select ( Author ) for author in session . execute ( select_statement ) . scalars (): print ( author ) if __name__ == \"__main__\" : main ()","title":"Usage"},{"location":"react/react/","text":"ReactJS Get started npx create-react-app <app> --template typescript Typescript Styling Material UI Out the box components.","title":"ReactJS"},{"location":"react/react/#reactjs","text":"","title":"ReactJS"},{"location":"react/react/#get-started","text":"npx create-react-app <app> --template typescript","title":"Get started"},{"location":"react/react/#typescript","text":"","title":"Typescript"},{"location":"react/react/#styling","text":"","title":"Styling"},{"location":"react/react/#material-ui","text":"Out the box components.","title":"Material UI"},{"location":"react/state_management/","text":"State Management Two types of state : Server Cache UI state Server cache RestAPI ReactQuery SWR RTKQuery GraphQL Apollo Relay","title":"State Management"},{"location":"react/state_management/#state-management","text":"Two types of state : Server Cache UI state","title":"State Management"},{"location":"react/state_management/#server-cache","text":"","title":"Server cache"},{"location":"react/state_management/#restapi","text":"ReactQuery SWR RTKQuery","title":"RestAPI"},{"location":"react/state_management/#graphql","text":"Apollo Relay","title":"GraphQL"}]}